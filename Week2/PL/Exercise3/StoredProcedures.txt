Scenario 1: The bank needs to process monthly interest for all savings accounts.
Question: Write a stored procedure ProcessMonthlyInterest that calculates and updates the balance of all savings accounts by applying an interest rate of 1% to the current balance.

CREATE OR REPLACE PROCEDURE ProcessMonthlyInterest AS
    v_interest_rate CONSTANT NUMBER := 0.01;
BEGIN
    FOR rec IN (SELECT AccountID, Balance FROM Accounts WHERE AccountType = 'Savings') LOOP
        UPDATE Accounts
        SET Balance = Balance + (rec.Balance * v_interest_rate),
            LastModified = SYSDATE
        WHERE AccountID = rec.AccountID;
    END LOOP;
    COMMIT;
END;
/


-------------------------------------------------------------------------------------------------------------

Scenario 2: The bank wants to implement a bonus scheme for employees based on their performance.
Question: Write a stored procedure UpdateEmployeeBonus that updates the salary of employees in a given department by adding a bonus percentage passed as a parameter.

CREATE OR REPLACE PROCEDURE UpdateEmployeeBonus (
    p_department VARCHAR2,
    p_bonus_percentage NUMBER
) AS
BEGIN
    FOR rec IN (SELECT EmployeeID, Salary FROM Employees WHERE Department = p_department) LOOP
        UPDATE Employees
        SET Salary = Salary + (rec.Salary * p_bonus_percentage / 100),
            HireDate = HireDate  -- Assuming HireDate is not to be modified but needed for other business logic
        WHERE EmployeeID = rec.EmployeeID;
    END LOOP;
    COMMIT;
END;
/


-------------------------------------------------------------------------------------------------------------

Scenario 3: Customers should be able to transfer funds between their accounts.
Question: Write a stored procedure TransferFunds that transfers a specified amount from one account to another, checking that the source account has sufficient balance before making the transfer.

CREATE OR REPLACE PROCEDURE TransferFunds (
    p_from_account_id NUMBER,
    p_to_account_id NUMBER,
    p_amount NUMBER
) AS
    v_from_balance NUMBER;
    v_to_balance NUMBER;
    v_insufficient_funds EXCEPTION;
BEGIN
    -- Check if from_account exists and get its balance
    SELECT Balance INTO v_from_balance
    FROM Accounts
    WHERE AccountID = p_from_account_id
    FOR UPDATE OF Balance;

    -- Check if to_account exists and get its balance
    SELECT Balance INTO v_to_balance
    FROM Accounts
    WHERE AccountID = p_to_account_id
    FOR UPDATE OF Balance;

    -- Check for sufficient funds in the from_account
    IF v_from_balance < p_amount THEN
        RAISE v_insufficient_funds;
    END IF;
    
    -- Perform the transfer
    UPDATE Accounts
    SET Balance = Balance - p_amount,
        LastModified = SYSDATE
    WHERE AccountID = p_from_account_id;

    UPDATE Accounts
    SET Balance = Balance + p_amount,
        LastModified = SYSDATE
    WHERE AccountID = p_to_account_id;

    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: One of the accounts does not exist.');
        ROLLBACK;
    WHEN v_insufficient_funds THEN
        DBMS_OUTPUT.PUT_LINE('Error: Insufficient funds in the from account.');
        ROLLBACK;
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        ROLLBACK;
END;
/


-------------------------------------------------------------------------------------------------------------