Scenario 1: Handle exceptions during fund transfers between accounts.
Question: Write a stored procedure SafeTransferFunds that transfers funds between two accounts. Ensure that if any error occurs (e.g., insufficient funds), an appropriate error message is logged and the transaction is rolled back.

CREATE OR REPLACE PROCEDURE SafeTransferFunds (
    p_from_account_id NUMBER,
    p_to_account_id NUMBER,
    p_amount NUMBER
) AS
    v_from_balance NUMBER;
    v_to_balance NUMBER;
    v_from_account_not_exist EXCEPTION;
    v_to_account_not_exist EXCEPTION;
    v_insufficient_funds EXCEPTION;
BEGIN
    -- Check if from_account exists
    SELECT Balance INTO v_from_balance
    FROM Accounts
    WHERE AccountID = p_from_account_id
    FOR UPDATE OF Balance;

    -- Check if to_account exists
    SELECT Balance INTO v_to_balance
    FROM Accounts
    WHERE AccountID = p_to_account_id
    FOR UPDATE OF Balance;
    
    -- Check for sufficient funds
    IF v_from_balance < p_amount THEN
        RAISE v_insufficient_funds;
    END IF;
    
    -- Perform the transfer
    UPDATE Accounts
    SET Balance = Balance - p_amount
    WHERE AccountID = p_from_account_id;
    
    UPDATE Accounts
    SET Balance = Balance + p_amount
    WHERE AccountID = p_to_account_id;
    
    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        IF SQL%ROWCOUNT = 0 THEN
            RAISE v_from_account_not_exist;
        ELSE
            RAISE v_to_account_not_exist;
        END IF;
    WHEN v_from_account_not_exist THEN
        DBMS_OUTPUT.PUT_LINE('Error: From account does not exist.');
        ROLLBACK;
    WHEN v_to_account_not_exist THEN
        DBMS_OUTPUT.PUT_LINE('Error: To account does not exist.');
        ROLLBACK;
    WHEN v_insufficient_funds THEN
        DBMS_OUTPUT.PUT_LINE('Error: Insufficient funds in the from account.');
        ROLLBACK;
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        ROLLBACK;
END;
/


-------------------------------------------------------------------------------------------------------------

Scenario 2: Manage errors when updating employee salaries.
Question: Write a stored procedure UpdateSalary that increases the salary of an employee by a given percentage. If the employee ID does not exist, handle the exception and log an error message.

CREATE OR REPLACE PROCEDURE UpdateSalary (
    p_employee_id NUMBER,
    p_percentage IN NUMBER
) AS
    v_current_salary NUMBER;
    v_employee_not_exist EXCEPTION;
BEGIN
    -- Check if employee exists
    SELECT Salary INTO v_current_salary
    FROM Employees
    WHERE EmployeeID = p_employee_id
    FOR UPDATE OF Salary;
    
    -- Update salary
    UPDATE Employees
    SET Salary = Salary + (Salary * p_percentage / 100)
    WHERE EmployeeID = p_employee_id;
    
    COMMIT;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE v_employee_not_exist;
    WHEN v_employee_not_exist THEN
        DBMS_OUTPUT.PUT_LINE('Error: Employee with ID ' || p_employee_id || ' does not exist.');
        ROLLBACK;
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        ROLLBACK;
END;
/


-------------------------------------------------------------------------------------------------------------

Scenario 3: Ensure data integrity when adding a new customer.
Question: Write a stored procedure AddNewCustomer that inserts a new customer into the Customers table. If a customer with the same ID already exists, handle the exception by logging an error and preventing the insertion.

CREATE OR REPLACE PROCEDURE AddNewCustomer (
    p_customer_id NUMBER,
    p_name VARCHAR2,
    p_dob DATE,
    p_balance NUMBER
) AS
    v_customer_exist EXCEPTION;
BEGIN
    -- Insert new customer
    INSERT INTO Customers (CustomerID, Name, DOB, Balance, LastModified)
    VALUES (p_customer_id, p_name, p_dob, p_balance, SYSDATE);
    
    COMMIT;
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        RAISE v_customer_exist;
    WHEN v_customer_exist THEN
        DBMS_OUTPUT.PUT_LINE('Error: Customer with ID ' || p_customer_id || ' already exists.');
        ROLLBACK;
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        ROLLBACK;
END;
/


-------------------------------------------------------------------------------------------------------------